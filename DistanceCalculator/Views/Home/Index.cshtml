@using DistanceCalculator.ViewModels;
@model HomeIndexViewModel
@{ ViewBag.Title = "Home"; }

<div class="row">
    <div class="col-md-12">
        @*@using (Html.BeginForm(new { id = "FilePathForm" }))
            {
                @Html.AntiForgeryToken()

                <div class="form-horizontal">
                    <hr />
                    @Html.ValidationSummary(true, "", new { @class = "text-danger" })
                    <div class="form-group">
                        @Html.LabelFor(model => model.ExcelFile, htmlAttributes: new { @class = "control-label col-md-2" })
                        <div class="col-md-10">
                            @Html.TextBoxFor(model => model.ExcelFile, new { @class = "form-control", type="file" })
                            @Html.ValidationMessageFor(model => model.ExcelFile, "", new { @class = "text-danger" })
                        </div>
                    </div>
                    <div class="form-group">
                        <div class="col-md-offset-2 col-md-10">
                            <input type="submit" value="Submit" class="btn btn-default" />
                        </div>
                    </div>
                </div>
            }*@
    </div>
</div>

<div class="row">
    <div class="col-md-12">
        @*@using (Ajax.BeginForm("Test", "Home", null, new AjaxOptions { HttpMethod = "POST" }, new { id = "FilePathForm", enctype = "multipart/form-data" }))*@
        @using (Html.BeginForm("Test", "Home", FormMethod.Post, new { enctype = "multipart/form-data", id = "FilePathForm" }))
        {
            @Html.AntiForgeryToken()
            <div class="form-horizontal">
                <hr />
                @Html.ValidationSummary(true, "", new { @class = "text-danger" })
                <div class="form-group">
                    @Html.LabelFor(model => model.File, htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-md-10">
                        @Html.TextBoxFor(model => model.File, new { @class = "form-control", type = "file" })
                        @Html.ValidationMessageFor(model => model.File, "", new { @class = "text-danger" })
                    </div>
                </div>
                <div class="form-group">
                    <div class="col-md-offset-2 col-md-10">
                        <input type="submit" value="Submit" class="btn btn-default" />
                    </div>
                </div>
                <div class="form-group">
                    <div class="col-md-offset-2 col-md-10">
                        <div id="progress">
                            <span id="CalculationProgressLabel">Calculating Addresses: </span>
                            <span id="CalculationProgress"><a href="/Home/Download" target="_blank"></a></span>
                        </div>
                    </div>
                </div>
                <div class="form-group">
                    <div class="col-md-offset-2 col-md-10">
                        <div id="progress" style="display:none">
                            <div id="message"></div>
                        </div>
                    </div>
                </div>
                <div class="form-group">
                    <div class="col-md-offset-2 col-md-10">
                        <span id="DownloadExcelFileLabel">Download Excel File: </span>
                        <span id="DownloadExcelFile"><a href="/Home/Download" target="_blank"></a></span>
                    </div>
                </div>
                @*<fieldset>
                        <div class="editor-label">
                            @Html.LabelFor(model => model.File)
                        </div>
                        <div class="editor-field">
                            @Html.TextBoxFor(model => model.File, new { type = "file" })
                            @Html.ValidationMessageFor(model => model.File)
                        </div>

                        <div class="editor-field">
                            <input type="submit" value="Submit" />
                        </div>
                    </fieldset>*@
            </div>
        }
    </div>
</div>

@*<div class="row">
    <div class="col-md-12">
        @using (Html.BeginForm("Test", "Home", FormMethod.Post, new { enctype = "multipart/form-data", id = "FilePathForm" }))
        {
            @Html.AntiForgeryToken()
            <div class="form-horizontal">
                <hr />
                @Html.ValidationSummary(true, "", new { @class = "text-danger" })
                <div class="form-group">
                    @Html.LabelFor(model => model.File, htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-md-10">
                        @Html.TextBoxFor(model => model.File, new { @class = "form-control", type = "file" })
                        @Html.ValidationMessageFor(model => model.File, "", new { @class = "text-danger" })
                    </div>
                </div>
                <div class="form-group">
                    <div class="col-md-offset-2 col-md-10">
                        <input type="submit" value="Submit" class="btn btn-default" />
                    </div>
                </div>
            </div>
        }
    </div>
</div>*@

        <script>
            $(function () {
                $("#FilePathForm").submit(function (e) {
                    if (!$(this).valid()) return false;
                });

                //if (!$form.valid()) return;
                var options = {
                    beforeSend: function () {
                        $("#CalculationProgress").html("<img src='images/ajax-loader.gif' style=\"width:20px;\" />");
                        $("#DownloadExcelFile").html("Waiting...");
                    },
                    success: function (responseText) {
                        $("#CalculationProgress").html("Addresses Calculated.");
                        //var response = JSON.parse(responseText);
                        //$("#DownloadExcelFile").html("<a href='/Home/Download?FileName=" + response.CalculatedAddressesFileName + "' target='_blank'>Download</a>");
                        var CalculatedDistances = [];
                        var MsaAddresses = JSON.parse(responseText);
                        console.log(MsaAddresses);

                        var Page = 1;
                        var PerPage = 20;
                        var NumberOfPages = Math.ceil(MsaAddresses.length / PerPage);
                        CalculateDistances();
                        function CalculateDistances() {
                            var PartialMsaAddresses = [];
                            for (var i = (Page - 1) * PerPage; (i < Page * PerPage) && (i < MsaAddresses.length); i++)
                            {
                                PartialMsaAddresses.push(MsaAddresses[i]);
                            }
                            
                            $.ajax({
                                type: "post",
                                contentType: "application/json",
                                url: "/Home/CalculateAddresses",
                                data: JSON.stringify(PartialMsaAddresses),
                                success: function (responseText1) {
                                    var Response = JSON.parse(responseText1);
                                    for (var i = 0; i < Response.CalculatedMsas.length; i++) {
                                        CalculatedDistances.push(Response.CalculatedMsas[i]);
                                    }
                                    if (Page++ != NumberOfPages) {
                                        CalculateDistances();
                                    } else {
                                        console.log(CalculatedDistances);
                                        console.log(JSON.stringify(CalculatedDistances).length);
                                        $.ajax({
                                            type: "post",
                                            contentType: "application/json",
                                            url: "/Home/PutResultsInExcel",
                                            data: JSON.stringify(CalculatedDistances),
                                            success: function (responseText2) {
                                                var response = JSON.parse(responseText2);
                                                $("#DownloadExcelFile").html("<a href='/Home/Download?FileName=" + response.CalculatedAddressesFileName + "' target='_blank'>Download</a>");
                                            }
                                        });
                                    }
                                }
                            });
                        }
                        
                        return;
                        Page++;
                        CalculateDistances();
                        Page++;
                        CalculateDistances();
                        return;
                        
                    },
                    uploadProgress: function (event, position, total, percentComplete) {
                        //$("#DownloadExcelFile").html(percentComplete + " - " + total);
                    },
                    complete: function (response) {
                        
                    },
                    error: function () {
                        $("#CalculationProgress").html("Failed");
                        $("#DownloadExcelFile").html("File could not be created due to failed progress");
                    }
                };
                $("#FilePathForm").ajaxForm(options);

                return false;

                //$("#FilePathForm").submit(function (e) {
                //    if (!$(this).valid()) { }

                //    var formData = new FormData($('form')[0]);
                //    console.log(formData);
                //    var form = e.target;
                //    if (form.getAttribute("enctype") === "multipart/form-data") {
                //        if (form.dataset.ajax) {
                //            e.preventDefault();
                //            e.stopImmediatePropagation();

                //            $.ajax({
                //                url: 'http://localhost:1637/Home/Test',
                //                type: 'Post',
                //                beforeSend: function () { },
                //                success: function (result) {

                //                },
                //                xhr: function () {  // Custom XMLHttpRequest
                //                    var myXhr = $.ajaxSettings.xhr();
                //                    if (myXhr.upload) { // Check if upload property exists
                //                        // Progress code if you want
                //                    }
                //                    return myXhr;
                //                },
                //                error: function () { },
                //                data: formData,
                //                cache: false,
                //                contentType: false,
                //                processData: false
                //            });

                //        }
                //    }

                //    return false;
                //});

            });
        </script>

        <script src="http://malsup.github.com/jquery.form.js"></script>
        <script src="~/Scripts/jquery.validate.min.js"></script>
        <script src="~/Scripts/jquery.unobtrusive-ajax.min.js"></script>
        <script src="~/Scripts/jquery.validate.unobtrusive.min.js"></script>
